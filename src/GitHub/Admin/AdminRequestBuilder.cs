// <auto-generated/>
using GitHub.Admin.Hooks;
using GitHub.Admin.Keys;
using GitHub.Admin.Ldap;
using GitHub.Admin.Organizations;
using GitHub.Admin.PreReceiveEnvironments;
using GitHub.Admin.PreReceiveHooks;
using GitHub.Admin.Tokens;
using GitHub.Admin.Users;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace GitHub.Admin
{
    /// <summary>
    /// Builds and executes requests for operations under \admin
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class AdminRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The hooks property</summary>
        public global::GitHub.Admin.Hooks.HooksRequestBuilder Hooks
        {
            get => new global::GitHub.Admin.Hooks.HooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The keys property</summary>
        public global::GitHub.Admin.Keys.KeysRequestBuilder Keys
        {
            get => new global::GitHub.Admin.Keys.KeysRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ldap property</summary>
        public global::GitHub.Admin.Ldap.LdapRequestBuilder Ldap
        {
            get => new global::GitHub.Admin.Ldap.LdapRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The organizations property</summary>
        public global::GitHub.Admin.Organizations.OrganizationsRequestBuilder Organizations
        {
            get => new global::GitHub.Admin.Organizations.OrganizationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The preReceiveEnvironments property</summary>
        public global::GitHub.Admin.PreReceiveEnvironments.PreReceiveEnvironmentsRequestBuilder PreReceiveEnvironments
        {
            get => new global::GitHub.Admin.PreReceiveEnvironments.PreReceiveEnvironmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The preReceiveHooks property</summary>
        public global::GitHub.Admin.PreReceiveHooks.PreReceiveHooksRequestBuilder PreReceiveHooks
        {
            get => new global::GitHub.Admin.PreReceiveHooks.PreReceiveHooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tokens property</summary>
        public global::GitHub.Admin.Tokens.TokensRequestBuilder Tokens
        {
            get => new global::GitHub.Admin.Tokens.TokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public global::GitHub.Admin.Users.UsersRequestBuilder Users
        {
            get => new global::GitHub.Admin.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Admin.AdminRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AdminRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/admin", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Admin.AdminRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AdminRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/admin", rawUrl)
        {
        }
    }
}
