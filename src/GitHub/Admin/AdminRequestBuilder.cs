// <auto-generated/>
using GitHub.Admin.Hooks;
using GitHub.Admin.Keys;
using GitHub.Admin.Ldap;
using GitHub.Admin.Organizations;
using GitHub.Admin.PreReceiveEnvironments;
using GitHub.Admin.PreReceiveHooks;
using GitHub.Admin.Tokens;
using GitHub.Admin.Users;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace GitHub.Admin {
    /// <summary>
    /// Builds and executes requests for operations under \admin
    /// </summary>
    public class AdminRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The hooks property</summary>
        public HooksRequestBuilder Hooks
        {
            get => new HooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The keys property</summary>
        public KeysRequestBuilder Keys
        {
            get => new KeysRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ldap property</summary>
        public LdapRequestBuilder Ldap
        {
            get => new LdapRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The organizations property</summary>
        public OrganizationsRequestBuilder Organizations
        {
            get => new OrganizationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The preReceiveEnvironments property</summary>
        public PreReceiveEnvironmentsRequestBuilder PreReceiveEnvironments
        {
            get => new PreReceiveEnvironmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The preReceiveHooks property</summary>
        public PreReceiveHooksRequestBuilder PreReceiveHooks
        {
            get => new PreReceiveHooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tokens property</summary>
        public TokensRequestBuilder Tokens
        {
            get => new TokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public UsersRequestBuilder Users
        {
            get => new UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="AdminRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AdminRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/admin", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="AdminRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AdminRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/admin", rawUrl)
        {
        }
    }
}
