// <auto-generated/>
using GitHub.Enterprise.Stats.All;
using GitHub.Enterprise.Stats.Comments;
using GitHub.Enterprise.Stats.Gists;
using GitHub.Enterprise.Stats.Hooks;
using GitHub.Enterprise.Stats.Issues;
using GitHub.Enterprise.Stats.Milestones;
using GitHub.Enterprise.Stats.Orgs;
using GitHub.Enterprise.Stats.Pages;
using GitHub.Enterprise.Stats.Pulls;
using GitHub.Enterprise.Stats.Repos;
using GitHub.Enterprise.Stats.SecurityProducts;
using GitHub.Enterprise.Stats.Users;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace GitHub.Enterprise.Stats {
    /// <summary>
    /// Builds and executes requests for operations under \enterprise\stats
    /// </summary>
    public class StatsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The all property</summary>
        public AllRequestBuilder All
        {
            get => new AllRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The comments property</summary>
        public CommentsRequestBuilder Comments
        {
            get => new CommentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The gists property</summary>
        public GistsRequestBuilder Gists
        {
            get => new GistsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hooks property</summary>
        public HooksRequestBuilder Hooks
        {
            get => new HooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issues property</summary>
        public IssuesRequestBuilder Issues
        {
            get => new IssuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The milestones property</summary>
        public MilestonesRequestBuilder Milestones
        {
            get => new MilestonesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The orgs property</summary>
        public OrgsRequestBuilder Orgs
        {
            get => new OrgsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pages property</summary>
        public PagesRequestBuilder Pages
        {
            get => new PagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pulls property</summary>
        public PullsRequestBuilder Pulls
        {
            get => new PullsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The repos property</summary>
        public ReposRequestBuilder Repos
        {
            get => new ReposRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The securityProducts property</summary>
        public SecurityProductsRequestBuilder SecurityProducts
        {
            get => new SecurityProductsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public UsersRequestBuilder Users
        {
            get => new UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="StatsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/enterprise/stats", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="StatsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/enterprise/stats", rawUrl)
        {
        }
    }
}
