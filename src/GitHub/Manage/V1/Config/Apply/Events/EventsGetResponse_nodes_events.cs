// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Manage.V1.Config.Apply.Events
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class EventsGetResponse_nodes_events : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The body property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Body { get; set; }
#nullable restore
#else
        public string Body { get; set; }
#endif
        /// <summary>The config_run_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConfigRunId { get; set; }
#nullable restore
#else
        public string ConfigRunId { get; set; }
#endif
        /// <summary>The event_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventName { get; set; }
#nullable restore
#else
        public string EventName { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The severity_text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SeverityText { get; set; }
#nullable restore
#else
        public string SeverityText { get; set; }
#endif
        /// <summary>The span_depth property</summary>
        public int? SpanDepth { get; set; }
        /// <summary>The span_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpanId { get; set; }
#nullable restore
#else
        public string SpanId { get; set; }
#endif
        /// <summary>The span_parent_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpanParentId { get; set; }
#nullable restore
#else
        public string SpanParentId { get; set; }
#endif
        /// <summary>The timestamp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timestamp { get; set; }
#nullable restore
#else
        public string Timestamp { get; set; }
#endif
        /// <summary>The topology property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Topology { get; set; }
#nullable restore
#else
        public string Topology { get; set; }
#endif
        /// <summary>The trace_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TraceId { get; set; }
#nullable restore
#else
        public string TraceId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Manage.V1.Config.Apply.Events.EventsGetResponse_nodes_events"/> and sets the default values.
        /// </summary>
        public EventsGetResponse_nodes_events()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Manage.V1.Config.Apply.Events.EventsGetResponse_nodes_events"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Manage.V1.Config.Apply.Events.EventsGetResponse_nodes_events CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Manage.V1.Config.Apply.Events.EventsGetResponse_nodes_events();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "body", n => { Body = n.GetStringValue(); } },
                { "config_run_id", n => { ConfigRunId = n.GetStringValue(); } },
                { "event_name", n => { EventName = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "severity_text", n => { SeverityText = n.GetStringValue(); } },
                { "span_depth", n => { SpanDepth = n.GetIntValue(); } },
                { "span_id", n => { SpanId = n.GetStringValue(); } },
                { "span_parent_id", n => { SpanParentId = n.GetStringValue(); } },
                { "timestamp", n => { Timestamp = n.GetStringValue(); } },
                { "topology", n => { Topology = n.GetStringValue(); } },
                { "trace_id", n => { TraceId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("body", Body);
            writer.WriteStringValue("config_run_id", ConfigRunId);
            writer.WriteStringValue("event_name", EventName);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteStringValue("severity_text", SeverityText);
            writer.WriteIntValue("span_depth", SpanDepth);
            writer.WriteStringValue("span_id", SpanId);
            writer.WriteStringValue("span_parent_id", SpanParentId);
            writer.WriteStringValue("timestamp", Timestamp);
            writer.WriteStringValue("topology", Topology);
            writer.WriteStringValue("trace_id", TraceId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
