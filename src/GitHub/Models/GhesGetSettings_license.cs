// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    #pragma warning disable CS1591
    public class GhesGetSettings_license : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cluster_support property</summary>
        public bool? ClusterSupport { get; set; }
        /// <summary>The evaluation property</summary>
        public bool? Evaluation { get; set; }
        /// <summary>The expire_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpireAt { get; set; }
#nullable restore
#else
        public string ExpireAt { get; set; }
#endif
        /// <summary>The perpetual property</summary>
        public bool? Perpetual { get; set; }
        /// <summary>The seats property</summary>
        public int? Seats { get; set; }
        /// <summary>The ssh_allowed property</summary>
        public bool? SshAllowed { get; set; }
        /// <summary>The support_key property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportKey { get; set; }
#nullable restore
#else
        public string SupportKey { get; set; }
#endif
        /// <summary>The unlimited_seating property</summary>
        public bool? UnlimitedSeating { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="GhesGetSettings_license"/> and sets the default values.
        /// </summary>
        public GhesGetSettings_license()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="GhesGetSettings_license"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GhesGetSettings_license CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GhesGetSettings_license();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"cluster_support", n => { ClusterSupport = n.GetBoolValue(); } },
                {"evaluation", n => { Evaluation = n.GetBoolValue(); } },
                {"expire_at", n => { ExpireAt = n.GetStringValue(); } },
                {"perpetual", n => { Perpetual = n.GetBoolValue(); } },
                {"seats", n => { Seats = n.GetIntValue(); } },
                {"ssh_allowed", n => { SshAllowed = n.GetBoolValue(); } },
                {"support_key", n => { SupportKey = n.GetStringValue(); } },
                {"unlimited_seating", n => { UnlimitedSeating = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("cluster_support", ClusterSupport);
            writer.WriteBoolValue("evaluation", Evaluation);
            writer.WriteStringValue("expire_at", ExpireAt);
            writer.WriteBoolValue("perpetual", Perpetual);
            writer.WriteIntValue("seats", Seats);
            writer.WriteBoolValue("ssh_allowed", SshAllowed);
            writer.WriteStringValue("support_key", SupportKey);
            writer.WriteBoolValue("unlimited_seating", UnlimitedSeating);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
