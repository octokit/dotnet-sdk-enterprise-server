// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace GitHub.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class GhesGetSettings_smtp : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>The authentication property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Authentication { get; set; }
#nullable restore
#else
        public string Authentication { get; set; }
#endif
        /// <summary>The discardToNoreplyAddress property</summary>
        public bool? DiscardToNoreplyAddress { get; set; }
        /// <summary>The domain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The enable_starttls_auto property</summary>
        public bool? EnableStarttlsAuto { get; set; }
        /// <summary>The noreply_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NoreplyAddress { get; set; }
#nullable restore
#else
        public string NoreplyAddress { get; set; }
#endif
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The port property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Port { get; set; }
#nullable restore
#else
        public string Port { get; set; }
#endif
        /// <summary>The support_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportAddress { get; set; }
#nullable restore
#else
        public string SupportAddress { get; set; }
#endif
        /// <summary>The support_address_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportAddressType { get; set; }
#nullable restore
#else
        public string SupportAddressType { get; set; }
#endif
        /// <summary>The user_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? User_name { get; set; }
#nullable restore
#else
        public string User_name { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::GitHub.Models.GhesGetSettings_smtp"/> and sets the default values.
        /// </summary>
        public GhesGetSettings_smtp()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::GitHub.Models.GhesGetSettings_smtp"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::GitHub.Models.GhesGetSettings_smtp CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::GitHub.Models.GhesGetSettings_smtp();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetStringValue(); } },
                { "authentication", n => { Authentication = n.GetStringValue(); } },
                { "discard-to-noreply-address", n => { DiscardToNoreplyAddress = n.GetBoolValue(); } },
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "enable_starttls_auto", n => { EnableStarttlsAuto = n.GetBoolValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "noreply_address", n => { NoreplyAddress = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "port", n => { Port = n.GetStringValue(); } },
                { "support_address", n => { SupportAddress = n.GetStringValue(); } },
                { "support_address_type", n => { SupportAddressType = n.GetStringValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
                { "user_name", n => { User_name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address", Address);
            writer.WriteStringValue("authentication", Authentication);
            writer.WriteBoolValue("discard-to-noreply-address", DiscardToNoreplyAddress);
            writer.WriteStringValue("domain", Domain);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteBoolValue("enable_starttls_auto", EnableStarttlsAuto);
            writer.WriteStringValue("noreply_address", NoreplyAddress);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("port", Port);
            writer.WriteStringValue("support_address", SupportAddress);
            writer.WriteStringValue("support_address_type", SupportAddressType);
            writer.WriteStringValue("user_name", User_name);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
