// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    #pragma warning disable CS1591
    public class GhesGetSettings_ldap : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The admin_group property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdminGroup { get; set; }
#nullable restore
#else
        public string AdminGroup { get; set; }
#endif
        /// <summary>The base property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Base { get; set; }
#nullable restore
#else
        public List<string> Base { get; set; }
#endif
        /// <summary>The bind_dn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BindDn { get; set; }
#nullable restore
#else
        public string BindDn { get; set; }
#endif
        /// <summary>The host property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Host { get; set; }
#nullable restore
#else
        public string Host { get; set; }
#endif
        /// <summary>The method property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Method { get; set; }
#nullable restore
#else
        public string Method { get; set; }
#endif
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The port property</summary>
        public int? Port { get; set; }
        /// <summary>The posix_support property</summary>
        public bool? PosixSupport { get; set; }
        /// <summary>The profile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GhesGetSettings_ldap_profile? Profile { get; set; }
#nullable restore
#else
        public GhesGetSettings_ldap_profile Profile { get; set; }
#endif
        /// <summary>The reconciliation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GhesGetSettings_ldap_reconciliation? Reconciliation { get; set; }
#nullable restore
#else
        public GhesGetSettings_ldap_reconciliation Reconciliation { get; set; }
#endif
        /// <summary>The recursive_group_search property</summary>
        public bool? RecursiveGroupSearch { get; set; }
        /// <summary>The search_strategy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SearchStrategy { get; set; }
#nullable restore
#else
        public string SearchStrategy { get; set; }
#endif
        /// <summary>The sync_enabled property</summary>
        public bool? SyncEnabled { get; set; }
        /// <summary>The team_sync_interval property</summary>
        public int? TeamSyncInterval { get; set; }
        /// <summary>The uid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uid { get; set; }
#nullable restore
#else
        public string Uid { get; set; }
#endif
        /// <summary>The user_groups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UserGroups { get; set; }
#nullable restore
#else
        public List<string> UserGroups { get; set; }
#endif
        /// <summary>The user_sync_emails property</summary>
        public bool? UserSyncEmails { get; set; }
        /// <summary>The user_sync_interval property</summary>
        public int? UserSyncInterval { get; set; }
        /// <summary>The user_sync_keys property</summary>
        public bool? UserSyncKeys { get; set; }
        /// <summary>The virtual_attribute_enabled property</summary>
        public bool? VirtualAttributeEnabled { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="GhesGetSettings_ldap"/> and sets the default values.
        /// </summary>
        public GhesGetSettings_ldap()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="GhesGetSettings_ldap"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GhesGetSettings_ldap CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GhesGetSettings_ldap();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"admin_group", n => { AdminGroup = n.GetStringValue(); } },
                {"base", n => { Base = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"bind_dn", n => { BindDn = n.GetStringValue(); } },
                {"host", n => { Host = n.GetStringValue(); } },
                {"method", n => { Method = n.GetStringValue(); } },
                {"password", n => { Password = n.GetStringValue(); } },
                {"port", n => { Port = n.GetIntValue(); } },
                {"posix_support", n => { PosixSupport = n.GetBoolValue(); } },
                {"profile", n => { Profile = n.GetObjectValue<GhesGetSettings_ldap_profile>(GhesGetSettings_ldap_profile.CreateFromDiscriminatorValue); } },
                {"reconciliation", n => { Reconciliation = n.GetObjectValue<GhesGetSettings_ldap_reconciliation>(GhesGetSettings_ldap_reconciliation.CreateFromDiscriminatorValue); } },
                {"recursive_group_search", n => { RecursiveGroupSearch = n.GetBoolValue(); } },
                {"search_strategy", n => { SearchStrategy = n.GetStringValue(); } },
                {"sync_enabled", n => { SyncEnabled = n.GetBoolValue(); } },
                {"team_sync_interval", n => { TeamSyncInterval = n.GetIntValue(); } },
                {"uid", n => { Uid = n.GetStringValue(); } },
                {"user_groups", n => { UserGroups = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"user_sync_emails", n => { UserSyncEmails = n.GetBoolValue(); } },
                {"user_sync_interval", n => { UserSyncInterval = n.GetIntValue(); } },
                {"user_sync_keys", n => { UserSyncKeys = n.GetBoolValue(); } },
                {"virtual_attribute_enabled", n => { VirtualAttributeEnabled = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("admin_group", AdminGroup);
            writer.WriteCollectionOfPrimitiveValues<string>("base", Base);
            writer.WriteStringValue("bind_dn", BindDn);
            writer.WriteStringValue("host", Host);
            writer.WriteStringValue("method", Method);
            writer.WriteStringValue("password", Password);
            writer.WriteIntValue("port", Port);
            writer.WriteBoolValue("posix_support", PosixSupport);
            writer.WriteObjectValue<GhesGetSettings_ldap_profile>("profile", Profile);
            writer.WriteObjectValue<GhesGetSettings_ldap_reconciliation>("reconciliation", Reconciliation);
            writer.WriteBoolValue("recursive_group_search", RecursiveGroupSearch);
            writer.WriteStringValue("search_strategy", SearchStrategy);
            writer.WriteBoolValue("sync_enabled", SyncEnabled);
            writer.WriteIntValue("team_sync_interval", TeamSyncInterval);
            writer.WriteStringValue("uid", Uid);
            writer.WriteCollectionOfPrimitiveValues<string>("user_groups", UserGroups);
            writer.WriteBoolValue("user_sync_emails", UserSyncEmails);
            writer.WriteIntValue("user_sync_interval", UserSyncInterval);
            writer.WriteBoolValue("user_sync_keys", UserSyncKeys);
            writer.WriteBoolValue("virtual_attribute_enabled", VirtualAttributeEnabled);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
