// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Models {
    #pragma warning disable CS1591
    public class GhesLicenseInfo : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether the GitHub Advanced Security feature is enabled.</summary>
        public bool? AdvancedSecurityEnabled { get; set; }
        /// <summary>If the GitHub Advanced Security feature is enabled, the seat count.</summary>
        public int? AdvancedSecuritySeats { get; set; }
        /// <summary>Whether the cluster support feature is enabled.</summary>
        public bool? ClusterSupport { get; set; }
        /// <summary>The company under which the license is issued.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Company { get; set; }
#nullable restore
#else
        public string Company { get; set; }
#endif
        /// <summary>Whether the Github Connect feature is enabled.</summary>
        public bool? CroquetSupport { get; set; }
        /// <summary>Whether this license is issued under custom terms.</summary>
        public bool? CustomTerms { get; set; }
        /// <summary>Wheter this license is issued as an evaluation license.</summary>
        public bool? Evaluation { get; set; }
        /// <summary>The expiration date of the license.</summary>
        public DateTimeOffset? ExpireAt { get; set; }
        /// <summary>Whether the insights feature is enabled.</summary>
        public bool? InsightsEnabled { get; set; }
        /// <summary>If the insights feature is enabled, the expiration date.</summary>
        public DateTimeOffset? InsightsExpireAt { get; set; }
        /// <summary>If the learning lab feature is enabled, the expiration date.</summary>
        public DateTimeOffset? LearningLabEvaluationExpires { get; set; }
        /// <summary>If the learning lab feature is enabled, the seat count.</summary>
        public int? LearningLabSeats { get; set; }
        /// <summary>Whether the perpetual feature is enabled.</summary>
        public bool? Perpetual { get; set; }
        /// <summary>The unique reference number of the license.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReferenceNumber { get; set; }
#nullable restore
#else
        public string ReferenceNumber { get; set; }
#endif
        /// <summary>If the license is issued with limited seating, the seat count.</summary>
        public int? Seats { get; set; }
        /// <summary>Whether the SSH feature is enabled.</summary>
        public bool? SshAllowed { get; set; }
        /// <summary>The support key of the license.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportKey { get; set; }
#nullable restore
#else
        public string SupportKey { get; set; }
#endif
        /// <summary>Whether the license is issued with unlimited seat count.</summary>
        public bool? UnlimitedSeating { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="GhesLicenseInfo"/> and sets the default values.
        /// </summary>
        public GhesLicenseInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="GhesLicenseInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GhesLicenseInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GhesLicenseInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"advancedSecurityEnabled", n => { AdvancedSecurityEnabled = n.GetBoolValue(); } },
                {"advancedSecuritySeats", n => { AdvancedSecuritySeats = n.GetIntValue(); } },
                {"clusterSupport", n => { ClusterSupport = n.GetBoolValue(); } },
                {"company", n => { Company = n.GetStringValue(); } },
                {"croquetSupport", n => { CroquetSupport = n.GetBoolValue(); } },
                {"customTerms", n => { CustomTerms = n.GetBoolValue(); } },
                {"evaluation", n => { Evaluation = n.GetBoolValue(); } },
                {"expireAt", n => { ExpireAt = n.GetDateTimeOffsetValue(); } },
                {"insightsEnabled", n => { InsightsEnabled = n.GetBoolValue(); } },
                {"insightsExpireAt", n => { InsightsExpireAt = n.GetDateTimeOffsetValue(); } },
                {"learningLabEvaluationExpires", n => { LearningLabEvaluationExpires = n.GetDateTimeOffsetValue(); } },
                {"learningLabSeats", n => { LearningLabSeats = n.GetIntValue(); } },
                {"perpetual", n => { Perpetual = n.GetBoolValue(); } },
                {"referenceNumber", n => { ReferenceNumber = n.GetStringValue(); } },
                {"seats", n => { Seats = n.GetIntValue(); } },
                {"sshAllowed", n => { SshAllowed = n.GetBoolValue(); } },
                {"supportKey", n => { SupportKey = n.GetStringValue(); } },
                {"unlimitedSeating", n => { UnlimitedSeating = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("advancedSecurityEnabled", AdvancedSecurityEnabled);
            writer.WriteIntValue("advancedSecuritySeats", AdvancedSecuritySeats);
            writer.WriteBoolValue("clusterSupport", ClusterSupport);
            writer.WriteStringValue("company", Company);
            writer.WriteBoolValue("croquetSupport", CroquetSupport);
            writer.WriteBoolValue("customTerms", CustomTerms);
            writer.WriteBoolValue("evaluation", Evaluation);
            writer.WriteDateTimeOffsetValue("expireAt", ExpireAt);
            writer.WriteBoolValue("insightsEnabled", InsightsEnabled);
            writer.WriteDateTimeOffsetValue("insightsExpireAt", InsightsExpireAt);
            writer.WriteDateTimeOffsetValue("learningLabEvaluationExpires", LearningLabEvaluationExpires);
            writer.WriteIntValue("learningLabSeats", LearningLabSeats);
            writer.WriteBoolValue("perpetual", Perpetual);
            writer.WriteStringValue("referenceNumber", ReferenceNumber);
            writer.WriteIntValue("seats", Seats);
            writer.WriteBoolValue("sshAllowed", SshAllowed);
            writer.WriteStringValue("supportKey", SupportKey);
            writer.WriteBoolValue("unlimitedSeating", UnlimitedSeating);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
